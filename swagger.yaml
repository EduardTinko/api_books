openapi: 3.0.3
info:
  title: Books shop OpenAPIl
  version: 0.0.01
servers:
  - url: http://127.0.0.1:8000/api/
tags:
  - name: author
    description: All authors
  - name: book
    description: Access to Petstore orders
paths:
  /authors/:
    post:
      tags:
        - author
      summary: Create a new author
      description: Endpoint to add a new author
      operationId: addAuthor
      requestBody:
        description: Create a new author
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                {"name": ["This field may not be blank."]}
    get:
      tags:
        - author
      summary: Get a list of authors
      description: Endpoint to get a list of authors
      operationId: getAuthors
      responses:
        '200':
          description: Authors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authors'
  /authors/{id}:
    get:
      tags:
        - author
      summary: Get an author by id
      description: Endpoint to get an author by id
      operationId: getAuthorsById
      parameters:
        - name: id
          in: path
          description: ID of the author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Author retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
  /books/:
    post:
      tags:
        - book
      summary: Create a new book
      description: Endpoint to add a new book
      operationId: addBook
      requestBody:
        description: Create a new book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                {
                  "name": ["Value is too short."],
                  "author": {"name": ["Value is too short."]},
                  "genre": ["Value is too short."],
                  "publication_date": ["Date has wrong format. Use one of these formats instead: YYYY-MM-DD."]
                }
    get:
      tags:
        - book
      summary: Get a list of books
      description: Endpoint to get a list of books
      operationId: getBooks
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
  /books/{id}:
    get:
      tags:
        - book
      summary: Get an book by id
      description: Endpoint to get an book by id
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: ID of the book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
    put:
      tags:
        - book
      summary: Edit book by id
      description: Endpoint to edit book by id
      operationId: PutBook
      parameters:
        - name: id
          in: path
          description: ID of the book to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Edit book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The book has been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                {
                  "name": ["Value is too short."],
                  "author": {"name": ["Value is too short."]},
                  "genre": ["Value is too short."],
                  "publication_date": ["Date has wrong format. Use one of these formats instead: YYYY-MM-DD."]
                }
    delete:
      tags:
        - book
      summary: Delete book by id
      description: Endpoint to Delete book by id
      operationId: DeleteBook
      parameters:
        - name: id
          in: path
          description: ID of the book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The book was successfully deleted
        '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  {"detail": "Not found."}
components:
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Not found."
    Author:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Leonardo"
    Authors:
      type: array
      items:
        $ref: '#/components/schemas/Author'
    Book:
        required:
          - name
          - author
          - genre
          - publication_date
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 3
          name:
            type: string
            example: "BookName"
          author:
            $ref: '#/components/schemas/Author'
          genre:
            type: string
            example: "Fantasy"
          publication_date:
            type: string
            format: date
            example: "2023-12-21"
    Books:
      type: array
      items:
        $ref: '#/components/schemas/Book'
